#!/bin/bash

# This script is meant to be used when the postinst script is called with $1
# set to triggered (this will require some minor adjustments)

set -e
set -u

shopt -s inherit_errexit

DESTDIR="${DESTDIR:-}"
DEFAULT_PROFILE='default'
DISTRO_PROFILES="${DISTRO_PROFILES:-/etc/crypto-config}"
# USER_PROFILES='user/crypto-config'
# ALL_PROFILES="${DISTRO_PROFILES} ${USER_PROFILES}"
ALL_PROFILES="${DISTRO_PROFILES}"

verbose='false'

dirs_in() {
  local d
  d="${1}"

  find "${d}" -mindepth 1 -maxdepth 1 -type d
}

_list_profiles_and_parent() {
  local profile_dir

  profile_dir="$1"

  for profile in $(dirs_in "${profile_dir}"); do

    profile="$(basename "${profile}")"

    echo "${profile}" | cat "${profile_dir}/${profile}/parent" -

  done
}

_reach_state() {
  local profile_dir
  local profile
  local apps

  profile_dir="${1}"
  profile="${2}"
  apps="$*"

  # Skip profiles that don't exist in the current profile directory
  # This is because shell script makes it a fair bit difficult to do the
  # topological sort on profile names and keep track of which directory
  # they come from.
  if ! [ -e "${profile_dir}/${profile}" ]; then
    continue
  fi

  $verbose && echo "  - Profile: ${profile}"

  # The default profile has no parent by definition and does not need to be
  # modified since it is the single source of truth
  case "${profile}" in
    "${DEFAULT_PROFILE}")
      $verbose && echo "    - source of truth"
      continue;;
  esac

  # Due to the call to tsort we couldn't easily keep the information on
  # where the profiles reside. Recover that.
  parent_profile="$(cat "${profile_dir}/${profile}/parent")"
  if [ -e "${profile_dir}/${parent_profile}" ]; then
    parent_profile_dir=".."
  else
    parent_profile_dir="${DESTDIR}${DISTRO_PROFILES}"
  fi

  for app in ${apps}; do

    link="${profile_dir}/${profile}/${app}"
    target="${parent_profile_dir}/${parent_profile}/${app}"
    if { [ "${parent_profile_dir}" = ".." ] && [ -e "$(realpath -m "${link}/../${target}")" ]; } || { [ -e "$(realpath -m "${target}")" ]; }; then
      $verbose && echo "    - ${app}: link to ${target}"
      if ! [ -e "${link}" ]; then
        ln -sfn "${target}" "${link}"
      fi
    else
      if [ -e "${link}" ] || [ -L "${link}" ]; then
        $verbose && echo "    - ${app}: remove"
      else
        $verbose && echo "    - ${app}: absent"
      fi
      rm -f "${link}"
    fi

  done
}

_update_profile() {
  local profile_dir
  local apps

  profile_dir="${1}"
  apps="$*"

  if ! [ -d "${profile_dir}" ]; then
    continue
  fi

  $verbose && echo "- Profile dir: ${profile_dir}"

  _list_profiles_and_parent "${profile_dir}" \
  | tsort \
  | while read profile; do
      _reach_state "${profile_dir}" "${profile}" ${apps}
  done
}

triggered() {
  local apps

  apps="$*"

  for profile_dir in ${ALL_PROFILES}; do
    _update_profile "${DESTDIR}${profile_dir}" ${apps}
  done
}

case "$1" in
  triggered|configure)
    shift
    triggered "$@"
    ;;
esac

#DEBHELPER#

exit 0
